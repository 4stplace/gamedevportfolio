/* autogenerated by Processing revision 1307 on 2025-10-23 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class SpaceGame extends PApplet {

//Forrest Jefferson | 9/23/25 | spacegame
Spaceship s1;
Rock r1;

ArrayList<Rock> rocks = new ArrayList<Rock>();
ArrayList<Laser> lasers = new ArrayList<Laser>();
ArrayList<Taser> tasers = new ArrayList<Taser>();
ArrayList<Star> stars = new ArrayList<Star>();
ArrayList<PowerUp> powerUps = new ArrayList<PowerUp>();
Timer rockTimer, pTimer;
boolean startsc,gameOver, win;
int sc,l, t;


public void setup() {
  startsc = false;
  gameOver = false;
  win = false;
  /* size commented out by preprocessor */;
  background(25);
  sc=0;
  l=10000;
  t=0;

  s1 = new Spaceship();
  r1 = new Rock();

  rockTimer = new Timer(500-PApplet.parseInt(sc/100));
  rockTimer.start();
  
  pTimer = new Timer(2000);
  pTimer.start();
}

public void draw() {
  if(!startsc) {
    startscreen();
  } else if(gameOver == true){
    gameOver();
  } else {
  background(15);

  stars.add(new Star());


  if (rockTimer.isFinished()) {
    rocks.add(new Rock());
    rockTimer.start();
  }
  
   if (pTimer.isFinished()) {
    powerUps.add(new PowerUp());
    pTimer.start();
  }

  for (int i = 0; i < stars.size(); i++) {
    Star star = stars.get(i);
    star.display();
    star.move();
    if (star.reachedBottom()==true) {
      stars.remove(star);
    }
  }

  for (int i = 0; i < rocks.size(); i++) {
    Rock rock = rocks.get(i);
    rock.display();
    rock.move();
    if (s1.intersect(rock)) {
      s1.he-=rock.w;
      sc+=rock.w;
      rocks.remove(rock);
      i--;
    }
    if (rock.reachedBottom()==true) {
      l-=rock.w;
      rocks.remove(rock);
      i--;
    }
  }

for (int i = 0; i < powerUps.size(); i++) {
    PowerUp powerUp = powerUps.get(i);
    powerUp.display();
    powerUp.move();
    //Deep AI wrote this code
    if (powerUp.intersect(s1)) {
  if (powerUp.t == 'H') {
    s1.he += 100; // Increase health by 100
    // Optional: Cap health at a maximum value, e.g., 1000
    s1.he = min(s1.he, 1000);
  } else if(powerUp.t == 'T'){
    t += 5;
    t = min(t, 10);
  }
  // Handle other power-up types if needed
  powerUps.remove(powerUp);
  i--;
}

  }
// I copied the laser for loop and used it for tasers (they're the same thing)
   for (int i = tasers.size() - 1; i >= 0; i--) {
  Taser taser = tasers.get(i);
  for (int j = 0; j < rocks.size(); j++) {
    Rock rock = rocks.get(j);
    if (taser.intersect(rock)) {
      sc += 20;
      rock.w -= 20;
      if (rock.w < 20) {
        rocks.remove(j);
        j--;
        sc += 40;
      }
      tasers.remove(i);
      break; // Exit inner loop after removing laser
    }
  }
  // Only move laser if it still exists
  if (tasers.size() > i) {
    tasers.get(i).display();
    tasers.get(i).move();
    if (tasers.get(i).reachedTop()) {
      tasers.remove(i);
    }
  }
}
 
//Deep AI edited this code for me
  for (int i = lasers.size() - 1; i >= 0; i--) {
  Laser laser = lasers.get(i);
  for (int j = 0; j < rocks.size(); j++) {
    Rock rock = rocks.get(j);
    if (laser.intersect(rock)) {
      sc += 10;
      rock.w -= 10;
      if (rock.w < 10) {
        rocks.remove(j);
        j--;
        sc += 20;
      }
      lasers.remove(i);
      break; // Exit inner loop after removing laser
    }
  }
  // Only move laser if it still exists
  if (lasers.size() > i) {
    lasers.get(i).display();
    lasers.get(i).move();
    if (lasers.get(i).reachedTop()) {
      lasers.remove(i);
    }
  }
}
  println(rocks.size());
  r1.reachedBottom();
  s1.display();
  s1.move(mouseX, mouseY);
  r1.display();
  r1.move();
  infoPanel();
  
  if(s1.shipDamage()){
    gameOver = true;
  }
  if(l<1){
    gameOver = true;
  }
  if(sc>40000){
    win = true;
  }
}
}

public void mousePressed() {
  if(!startsc) {
    startsc=true;
  } else if(gameOver == true){
    s1.he = 1000;
    l=10000;
    sc = 0;
    gameOver = false;
   } else if(gameOver == true){
    s1.he = 1000;
    l=10000;
    sc = 0;
    gameOver = false;
 } else if(win == true){
    s1.he = 1000;
    l=10000;
    sc = 0;
    win = false;

  } else if(t>0) {
    tasers.add(new Taser(s1.x, s1.y));
    t-=1;
  } else {
    lasers.add(new Laser(s1.x, s1.y));
  }
}

public void infoPanel() {
  rectMode(CENTER);
  fill(127, 127);
  rect(width/2, 25, width, 50);
  fill(255);
  textSize(25);
  text("score" + sc, 20, 40);
  text("earth health" + l, width-240,40);
  text("rocket health" + s1.he, width/2,40);
}

public void startscreen() {
  //image(startsc,0,0);
  background(0);
  fill(225);
  textSize(50);
  textMode(CENTER);
  text("Strange Looking Asteroids",300,400);
  textSize(40);
  text("(simon on spagetti, frosen potato chips, and 8-bit volcano)",0,500);
  textSize(30);
  text("click to start!",300,700);
}

public void win(){
   background(0);
  textSize(50);
  textMode(CENTER);
  text("congradulations!!!!!!!!!!!.",300,400);
  text("score: " + sc,500,500);
  textSize(30);
  text("click to play again!", 400,600);
}


public void gameOver() {
  background(0);
  textSize(50);
  textMode(CENTER);
  text("you failed to save earth...",300,400);
  text("score: " + sc,500,500);
  textSize(30);
  text("click to play again!", 400,600);
}
class Laser {
  // member variables
  int x,y,w,h,sp;

  //constructor
  Laser(int x, int y){
    this.x = x;
    this.y = y;
    w = 4;
    h = 40;
    sp = 32;
  }
  //member methods
  public void display() {
   fill(225,0,0);
   rectMode(CENTER);
   rect(x,y,w,h);
  }
  
  public void move() {
    y = y-sp;
  }
  
  public void fire() {
    
  }
  
  public boolean reachedTop() {
    if(y<-20) {
      return true;
    } else {
      return false;
    }
  }
   public boolean intersect(Rock r) {
    float d=dist(x, y, r.x, r.y);
    if (d<50) {
      return true;
    } else {
      return false;
    }
  }
}
class PowerUp {
  // member variables
  int x,y,w,sp,c1,t;
  //constructor
  PowerUp(){
    x = PApplet.parseInt(random(width));
    y = -100;
    w = 50;
    sp= 2;
    if(random(10)>5) {
      //r1 = loadImage("rock01.png");
      t = 'H';
      c1 = color(225,33,22);
    } else {
      //r1 = loadImage("rock02.png");
      t = 'T';
      c1 = color(34,32,225);
    }
  }
  //member methods
  public void display() {
   fill(c1);
   ellipse(x,y,w,w);
  }
  
  public void move() {
    y = y+sp;
  }
  
  public boolean intersect(Spaceship s) {
    float d=dist(x, y, s.x, s.y);
    if (d<50) {
      return true;
    } else {
      return false;
    }
  }
  
  public boolean reachedBottom() {
    if(y>height+w)  {
      return true;
    }else {
      return false;
    }
  }
}
class Rock {
  // member variables
  int x,y,w,h,sp;
  PImage r1;
  //constructor
  Rock(){
    x = PApplet.parseInt(random(width));
    y = -100;
    w = PApplet.parseInt(random(10,100));
    sp= PApplet.parseInt(random(1,10));
    if(random(10)>7) {
      r1 = loadImage("rock01.png");
    } else if(random(10)>5) {
      r1 = loadImage("rock02.png");
    } else {
      r1 = loadImage("rock03.png");
    }
  }
  //member methods
  public void display() {
    r1.resize(w,w);
   image(r1,x,y);
  }
  
  public void move() {
    y = y+sp;
  }
  public boolean reachedBottom() {
    if(y>height+w)  {
      return true;
    }else {
      return false;
    }
  }
}
class Spaceship {
  // member variables
  int x, y, w, he;
  PImage ship;
  //constructor
  Spaceship() {
    x = width/2;
    y = height/2;
    he = 1000;
    w = 100;
    ship = loadImage("spaceship.png");
  }
  //member methods
  public void display() {
    imageMode(CENTER);
    image(ship, x, y);
  }

  public void move(int x, int y) {
    this.x = x;
    this.y = y;
  }

  public void fire() {
  }

  public boolean intersect(Rock r) {
    float d=dist(x, y, r.x, r.y);
    if (d<50) {
      return true;
    } else {
      return false;
    }
  }
  
  public boolean shipDamage() {
    if (he<1) {
      return true;
    } else {
      return false;
    }
  }
  
}
class Star{
  // member variables
  int x,y,w,sp;
  
  Star(){
    x=PApplet.parseInt(random(width));
    y=-10;
    w=PApplet.parseInt(random(1,4));
    sp=PApplet.parseInt(random(2,8));
  }
  
  public void display(){
    fill(random(100,255));
    rect(x,y,w,w);
  }
  
  public void move() {
    y=y+sp;
  }
  
  public boolean reachedBottom() {
    if(y>height+10) {
      return true;
    } else {
      return false;
    }  
  }
}
class Taser {
  // member variables
  int x,y,w,h,sp;

  //constructor
  Taser(int x, int y){
    this.x = x;
    this.y = y;
    w = 4;
    h = 40;
    sp = 32;
  }
  //member methods
  public void display() {
   fill(0,225,225);
   rectMode(CENTER);
   rect(x,y,w,h);
  }
  
  public void move() {
    y = y-sp;
  }
  
  public void fire() {
    
  }
  
  public boolean reachedTop() {
    if(y<-20) {
      return true;
    } else {
      return false;
    }
  }
   public boolean intersect(Rock r) {
    float d=dist(x, y, r.x, r.y);
    if (d<50) {
      return true;
    } else {
      return false;
    }
  }
}
//by Danial Shiffman
class Timer {

  int savedTime; // When Timer started
  int totalTime; // How long Timer should last

  Timer(int tempTotalTime) {
    totalTime = tempTotalTime;
  }

  // Starting the timer
  public void start() {
    // When the timer starts it stores the current time in milliseconds.
    savedTime = millis();
  }

  // The function isFinished() returns true if 5,000 ms have passed. 
  // The work of the timer is farmed out to this method.
  public boolean isFinished() { 
    // Check how much time has passed
    int passedTime = millis()- savedTime;
    if (passedTime > totalTime) {
      return true;
    } else {
      return false;
    }
  }
}


  public void settings() { size(1000, 800); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "SpaceGame" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
